@mixin none() {
  display: none !important;
}
@mixin round() {
  border-radius: 50%;
  overflow: hidden;
}
@mixin rounded_square() {
  border-radius: 2px;
  overflow: hidden;
}

@mixin vendor-prefix($name, $value) {
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    #{$vendor}#{$name}: #{$value};
  }
  //@include vendor-prefix('property', 'value');
}
@function get-side($val, $side) {
  $length: length($val);

  @if $length == 1 {
    @return $val;
  }
  @if $length == 2 {
    @return map-get(
      (
        top: nth($val, 1),
        bottom: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2),
      ),
      $side
    );
  }
  @if $length == 3 {
    @return map-get(
      (
        top: nth($val, 1),
        left: nth($val, 2),
        right: nth($val, 2),
        bottom: nth($val, 3),
      ),
      $side
    );
  }
  @if $length == 4 {
    @return map-get(
      (
        top: nth($val, 1),
        right: nth($val, 2),
        bottom: nth($val, 3),
        left: nth($val, 4),
      ),
      $side
    );
  }
}

// FUNCTIONS //
/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// SQUARE ROOT
@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }

  @return $x1;
}

// PERCIEVED BRIGHTNESS CALCULATIONS

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt(
    (
        ($red-component * $red-component * $red-magic-number) +
          ($green-component * $green-component * $green-magic-number) +
          ($blue-component * $blue-component * $blue-magic-number)
      ) / $brightness-divisor
  );

  // Convert to percentage and return
  @return 100% * $number / 255;
}

@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}

@mixin contain-image() {
  max-width: 100%;
  max-height: 100%;
  margin: 0 auto;
  @supports (object-fit: contain) {
    object-fit: contain;
    object-position: center;
    width: 100%;
    height: 100%;
  }
}

@mixin cover-image() {
  @include contain-image();
  @supports (object-fit: cover) {
    object-fit: cover;
  }
}

@mixin center-image() {
  @include contain-image();
  @supports (object-fit: scale-down) {
    object-fit: scale-down;
  }
}

@mixin contain-image-absolute() {
  position: absolute;
  top: 50%;
  left: 50%;
  max-width: 100%;
  max-height: 100%;
  transform: translate(-50%, -50%);
  margin: 0;
  @supports (object-fit: contain) {
    object-fit: contain;
    object-position: center;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: none;
  }
}

@mixin cover-image-absolute() {
  @include contain-image-absolute();
  @supports (object-fit: cover) {
    object-fit: cover;
  }
}

@mixin center-image-absolute() {
  @include contain-image-absolute();
  @supports (object-fit: scale-down) {
    object-fit: scale-down;
  }
}

@mixin cover-background($full: false, $zindex: -1) {
  content: '';
  display: block;
  position: absolute;
  z-index: $zindex;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  @if ($full) {
    width: 100vw;
    left: 50%;
    transform: translateX(-50%);
  }
}

@mixin background-cover($full: false, $zindex: -1) {
  @include cover-background($full, $zindex);
}

@mixin vendor-prefix($name, $value) {
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    #{$vendor}#{$name}: #{$value};
  }
}

@mixin clean-ul() {
  &,
  li {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: block;
  }
}

@mixin cf() {
  *zoom: 1;
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin none() {
  display: none !important;
}

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}
